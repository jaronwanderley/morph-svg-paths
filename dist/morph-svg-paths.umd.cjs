!function(e,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports):"function"==typeof define&&define.amd?define(["exports"],a):a((e="undefined"!=typeof globalThis?globalThis:e||self).MorphSVGPaths={})}(this,(function(e){"use strict";const a=(e=[],a=[])=>e.reduce(((e,t,o)=>e+t*(a[o]||0)),0);e.blendValues=a,e.morphPaths=function(e=[]){const t=(e,a)=>`${e} need to ${a}!`,o=" ",n=e=>e.toLowerCase();if(!Array.isArray(e))throw t("Parameter","be a array");if(e.length<2)throw t("Number of paths","minimal of 2");if(e.some((e=>"string"!=typeof e)))throw t("Paths","be String");const r=e.map((e=>e.replace(/,/g,o).replace(/$/g,o).replace(/ *([a-zA-Z]) */g,"$1").replace(/(.*) +$/g,"$1").replace(/([0-9]+)-/g,"$1 -").replace(/ *(a-zA-Z) */g,"$1").replace(/ *( ) */g,"$1").replace(/\s{1,}/g,o).replace(/ ($)/g,"$1").match(/[a-zA-Z][0-9 .-]*/g)?.filter((([e])=>"mlthvcsqaz".split("").includes(n(e)))).map((([e,...a])=>({command:e,values:a.join("").split(o).map((e=>+e))})))));if(new Set(r.map((e=>e?.map((({command:e,values:a})=>`${e}${a.length}`)).join("")))).size>1)throw t("Paths","have same commands");const s=r[0]?.map((({command:e,values:a},t)=>({command:e,values:a.map(((e,a)=>r.reduce(((e,o)=>(o&&e.push(o[t]?.values[a]),e)),[])))})));return(r=[])=>{if(r.length!==e.length)throw t("Count of percentages","be equal to paths");if(r.some((e=>"number"!=typeof e)))throw t("Percentages","be numbers");return s?.map((({command:e,values:t})=>{const s=t.map((e=>a(e,r))).join(o);return`${e}${"z"===n(e)?"":o+s}`})).join(o)}},Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
